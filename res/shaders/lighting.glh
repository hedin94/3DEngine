varying vec2 texCoord0;
varying vec3 worldPos0;
varying mat3 tbnMatrix;

struct BaseLight
{
  vec3 color;
  float intensity;
};

struct DirectionalLight
{
  BaseLight base;
  vec3 direction;
};

struct Attenuation
{
  float constant;
  float linear;
  float exponent;
};

struct PointLight
{
  BaseLight base;
  Attenuation atten;
  vec3 position;
  float range;
};

struct SpotLight
{
  PointLight pointLight;
  vec3 direction;
  float cutoff;
};

uniform sampler2D diffuse;
uniform sampler2D normalMap;
uniform vec3 R_eyePos;

uniform float specularIntensity;
uniform float specularPower;

vec4 calcLight(BaseLight base, vec3 direction, vec3 normal)
{
  float diffuseFactor = dot(normal, -direction);
  vec4 diffuseColor = vec4(0,0,0,0);
  vec4 specularColor = vec4(0,0,0,0);

  if(diffuseFactor > 0)
    {
      diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;

      vec3 directionToEye = normalize(R_eyePos - worldPos0);

      // Blinn-Phong
      vec3 halfDirection = normalize(directionToEye - direction);
      float specularFactor = dot(normal, halfDirection);

      // Phong
      //vec3 reflectDirection = normalize(reflect(direction, normal));
      //float specularFactor = dot(directionToEye, reflectDirection);

      specularFactor = pow(specularFactor, specularPower);
        
      if(specularFactor > 0)
      {
       specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
      }
    }

  return diffuseColor * specularColor;
}

vec4 calcDirectionalLight(DirectionalLight light, vec3 normal)
{
  return calcLight(light.base, light.direction, normal);
}

vec4 calcPointLight(PointLight point, vec3 normal)
{
  vec3 lightDirection = worldPos0 - point.position;
  float distanceToPoint = length(lightDirection);
    
  if(distanceToPoint > point.range)
    return vec4(0,0,0,0);
    
  lightDirection = normalize(lightDirection);
    
  vec4 color = calcLight(point.base, lightDirection, normal);
    
  float attenuation = point.atten.constant +
    point.atten.linear * distanceToPoint +
    point.atten.exponent * distanceToPoint * distanceToPoint +
    0.0001;
                         
  return color / attenuation;
}

vec4 calcSpotLight(SpotLight light, vec3 normal)
{
  vec3 lightDirection = normalize(worldPos0 - light.pointLight.position);
  float spotFactor = dot(lightDirection, light.direction);
    
  vec4 color = vec4(0,0,0,0);
    
  if(spotFactor > light.cutoff)
    {
      color = calcPointLight(light.pointLight, normal) *
	(1.0 - (1.0 - spotFactor)/(1.0 - light.cutoff));
    }
    
  return color;
}
